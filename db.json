{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/gitlab-ci/jobs.png","path":"images/gitlab-ci/jobs.png","modified":0,"renderable":0},{"_id":"source/images/gitlab-ci/runner-url-token.png","path":"images/gitlab-ci/runner-url-token.png","modified":0,"renderable":0},{"_id":"source/images/gitlab-ci/runner-added.png","path":"images/gitlab-ci/runner-added.png","modified":0,"renderable":0},{"_id":"source/images/gitlab-ci/pipeline.png","path":"images/gitlab-ci/pipeline.png","modified":0,"renderable":0},{"_id":"source/images/gitlab-ci/runner-exist.png","path":"images/gitlab-ci/runner-exist.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/travis-ci/build-status-pass.png","path":"images/travis-ci/build-status-pass.png","modified":0,"renderable":0},{"_id":"source/images/travis-ci/settings-environment-variables.png","path":"images/travis-ci/settings-environment-variables.png","modified":0,"renderable":0},{"_id":"source/images/travis-ci/repoList.png","path":"images/travis-ci/repoList.png","modified":0,"renderable":0},{"_id":"source/images/travis-ci/settings-general.png","path":"images/travis-ci/settings-general.png","modified":0,"renderable":0},{"_id":"source/images/travis-ci/index.png","path":"images/travis-ci/index.png","modified":0,"renderable":0},{"_id":"source/images/travis-ci/encrypted.png","path":"images/travis-ci/encrypted.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/next/.gitignore","hash":"c8d6a73b9e17f0f8a3716e4ada6960d3180425a6","modified":1491209430075},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1491209430067},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1491209430071},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1491209430078},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1491209430081},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1491209430085},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1491209430094},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1491209430090},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1491209430104},{"_id":"themes/next/gulpfile.coffee","hash":"d267332ec1461042fb16a9cb0737e1555fb4b79e","modified":1491209430108},{"_id":"themes/next/_config.yml","hash":"1a86584f7d33e2dd73ce5b1761dc99e96d9eb0ac","modified":1500871384628},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1491209430548},{"_id":"source/_posts/使用Travis-CI进行持续集成.md","hash":"6e0563c4f8d3394844d92d42ab672f7222ff5ec1","modified":1501341036329},{"_id":"source/categories/index.md","hash":"593d85fc40017ef817abac9e9a981d4388bf8468","modified":1500871384611},{"_id":"source/tags/index.md","hash":"da3f4dc88271f2b2723f55b023f575dc4f21aad4","modified":1500871384622},{"_id":"source/_posts/使用GitLab-CI进行持续集成.md","hash":"d9876a27a00459ee4e4e2ae060a5de24fe6b0f4a","modified":1501341096332},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1491209430113},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1491209430125},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1491209430118},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1491209430128},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1491209430132},{"_id":"themes/next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1491209430137},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1491209430144},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1491209430141},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1491209430148},{"_id":"themes/next/languages/zh-Hans.yml","hash":"ed36a28104f3c185fc4a0b3e52071d0efabe168c","modified":1500871368590},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1500871368591},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1500871368593},{"_id":"themes/next/languages/en.yml","hash":"63de36e9f5822084b61b03a507f6246f8f962b3f","modified":1491209430121},{"_id":"themes/next/layout/_layout.swig","hash":"627aa021dd052d3700e84f8c2eeabd4e30989158","modified":1491209430164},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1491209430525},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1491209430529},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1491209430522},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1491209430533},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1491209430541},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1491209430537},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1491209430544},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1491209430558},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1491209431452},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1491209431464},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1491209431482},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491209430986},{"_id":"source/images/gitlab-ci/jobs.png","hash":"5cc0aa681ebdc6190cd51daa6bcac3c326431709","modified":1500880793814},{"_id":"source/images/gitlab-ci/runner-url-token.png","hash":"88ca860734191831f2c0dbda7b22cd36510f65fc","modified":1500871589827},{"_id":"source/images/gitlab-ci/runner-added.png","hash":"f462dd07b2d5caa305678893488df39dfd17bfa6","modified":1500871985631},{"_id":"source/images/gitlab-ci/pipeline.png","hash":"f97dac89d38aaf156593dba585165551264d342d","modified":1500872118233},{"_id":"source/images/gitlab-ci/runner-exist.png","hash":"594adb260f5025127240b67c30c6cbb6b3a31c6d","modified":1500872091398},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"bc311e9f4333188da5c9c721ae467ba14410d5b2","modified":1491209430169},{"_id":"themes/next/layout/_macro/post.swig","hash":"ea40d388ae190e2228cbe54f054be621e3fa061c","modified":1491209430179},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1491209430183},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1491209430193},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"084867c289c95c5ebc18435a3b2092091bb8e2ba","modified":1491209430188},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1491209430201},{"_id":"themes/next/layout/_partials/comments.swig","hash":"58fd826ca75b0cbc48b61a58da4b841e2fa34403","modified":1491209430197},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1491296740628},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1491209430229},{"_id":"themes/next/layout/_partials/head.swig","hash":"06b6604176367af52587312e2575b52ecf53c3d9","modified":1491209430215},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1491209430225},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1491209430232},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1491209430318},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1491209430322},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1491209430325},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1491209430513},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1491209430564},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1491209430585},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1491209430571},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1491209430985},{"_id":"themes/next/source/images/avatar.jpg","hash":"9c642030017fb42fa73480bcd342f383674816ae","modified":1491209430991},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1491209430995},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1491209431004},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1491209430999},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1491209431013},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1491209431018},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1491209431009},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491209431020},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491209431021},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1491209431019},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1491209431023},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1491209431022},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1491209431024},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491209430329},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491209430329},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491209430851},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491209430850},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491209430861},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491209430966},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491209430979},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1491209430237},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1491209430257},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1491209430252},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1491209430220},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1491209430264},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1491209430294},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1491209430297},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1491209430308},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1491209430329},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1491209430334},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1491209430339},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1491209430400},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1491209430475},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1491209430442},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1491209430505},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1491209430492},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"60a51a33416e2b86ac9fbefc86b80f2f5f60e1c0","modified":1491209430461},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1491209430850},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1491209430854},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1491209430966},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1491209430860},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3f0d6aa424f434e82ea507f740eeff110f996269","modified":1491209430979},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1491209430972},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1491209431043},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1491209431044},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1491209431056},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1491209431055},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1491209431056},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1491209431076},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1491209431078},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1491209431135},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1491209431148},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1491209431172},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1491209431136},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1491209431143},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1491209431169},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1491209431176},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1491209431177},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1491209431181},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1491209431262},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1491209431321},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1491209431315},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1491209431308},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1491209431325},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1491209431339},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1491209431341},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1491209431373},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1491209431378},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1491209431422},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1491209431448},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1491209431433},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1491209431304},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1491209430349},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1491209430359},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1491209430355},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1491209430371},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1491209430381},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1491209430397},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3065c1bcb54da1e0018136595741341ac71ef9e7","modified":1491209430411},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1491209430421},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1491209430590},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1491209430594},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1491209430597},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1491209430601},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1491209430667},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1491209430769},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1491209430821},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1491209430824},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1491209430841},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1491209430866},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1491209430836},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1491209430832},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1491209430845},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1491209430875},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1491209430881},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1491209430872},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1491209430892},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1491209430887},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1491209430931},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1491209430898},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1491209430936},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1491209430950},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"7b206cd8921bc042f8e37a74aea1abc8a5ec8ab4","modified":1491209430940},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1491209430960},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1491209430945},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1491209430913},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1491209430916},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1491209430956},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1491209430921},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1491209430922},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1491209430926},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1491209431058},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1491209431079},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1491209431080},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1491209431081},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1491209431082},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1491209431083},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1491209431085},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1491209431095},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1491209431111},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1491209431131},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1491209431164},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1491209431163},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1491209431185},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1491209431190},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1491209431194},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1491209431257},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1491209431355},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1491209431369},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1491209431203},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1491209431221},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1491209431249},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1491209431401},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1491209430605},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1491209430609},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1491209430619},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1491209430612},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1491209430627},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1491209430623},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1491209430631},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1491209430646},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"d23db2f598b8eb274680023745ba6d6d466cd84a","modified":1491209430637},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1491209430651},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1491209430642},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1491209430656},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1491209430660},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1491209430663},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1491209430678},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1491209430690},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1491209430687},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1491209430674},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1491209430694},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1491209430698},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1491209430702},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1491209430713},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1491209430721},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1491209430706},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1491209430710},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1491209430795},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1491209430792},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1491209430727},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1491209430803},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1491209430799},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1491209430814},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1491209430737},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1491209430809},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1491209430732},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1491209430740},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1491209430745},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1491209430750},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1491209430758},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1491209430765},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1491209430754},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1491209430762},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1491209430780},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1491209430784},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1491209430775},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1491209430788},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1491209430906},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1491209430903},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1491209430927},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1491209431086},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1491209431090},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1491209431091},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1491209431093},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1491209431092},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1491209431094},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1491209431242},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1491209431236},{"_id":"public/categories/index.html","hash":"a0fa35690e0e6e83a1238a117526980ca9ebac0f","modified":1501340776625},{"_id":"public/tags/index.html","hash":"36b12b670d79e7faa6533cc8dfffa9ba47ed47c5","modified":1501340776624},{"_id":"public/2017/07/25/使用Travis-CI进行持续集成/index.html","hash":"753481b88363b52f320701e65a2d9ebfb1efc30d","modified":1501341101745},{"_id":"public/archives/index.html","hash":"94c0fc18e0b1af9c616c16b71b636a2f2d924c4d","modified":1501340776625},{"_id":"public/archives/2017/index.html","hash":"6df8d7de408c734a882160f7218d6a08fcd784f1","modified":1501340776625},{"_id":"public/archives/2017/07/index.html","hash":"27ad3b24b892f873a2cdbca8a4956920a1b8b7eb","modified":1501340776625},{"_id":"public/categories/工具/index.html","hash":"37f8d691e489713f7c02036cf5d0e6d0ec5cf8b9","modified":1501340776625},{"_id":"public/tags/工具/index.html","hash":"b312878ab77bd45127247e8a4d214d026960dd4f","modified":1501340776625},{"_id":"public/tags/CI/index.html","hash":"50532c9bc3be9d9c2e550dac3f8e95ecc70afdb0","modified":1501340776625},{"_id":"public/index.html","hash":"442d90cd28ac3587788de6966fb3807644acb7e0","modified":1501341101745},{"_id":"public/2017/07/23/使用GitLab-CI进行持续集成/index.html","hash":"21f0efb857e8a87572a3ed9023465b13e6b87fd7","modified":1501341101745},{"_id":"public/images/gitlab-ci/jobs.png","hash":"5cc0aa681ebdc6190cd51daa6bcac3c326431709","modified":1501340776626},{"_id":"public/images/gitlab-ci/runner-added.png","hash":"f462dd07b2d5caa305678893488df39dfd17bfa6","modified":1501340776626},{"_id":"public/images/gitlab-ci/runner-url-token.png","hash":"88ca860734191831f2c0dbda7b22cd36510f65fc","modified":1501340776626},{"_id":"public/images/gitlab-ci/pipeline.png","hash":"f97dac89d38aaf156593dba585165551264d342d","modified":1501340776626},{"_id":"public/images/gitlab-ci/runner-exist.png","hash":"594adb260f5025127240b67c30c6cbb6b3a31c6d","modified":1501340776626},{"_id":"public/images/avatar.jpg","hash":"9c642030017fb42fa73480bcd342f383674816ae","modified":1501340776626},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1501340776626},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1501340776626},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1501340776626},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1501340776626},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1501340776626},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1501340776626},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501340776626},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501340776626},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1501340776627},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1501340776627},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1501340776627},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1501340776627},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1501340777493},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1501340777499},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1501340777499},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1501340777500},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1501340777500},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1501340777500},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1501340777500},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1501340777500},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1501340777500},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1501340777500},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1501340777500},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1501340777558},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1501340777558},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1501340777558},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1501340777549},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1501340777551},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1501340777554},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1501340777554},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1501340777554},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1501340777554},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1501340777555},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1501340777567},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1501340777567},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1501340777567},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1501340777567},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1501340777567},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1501340777567},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1501340777567},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1501340777567},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1501340777567},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1501340777568},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1501340777568},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1501340777568},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1501340777568},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1501050410003},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1501050410003},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1501340777568},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1501340777568},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1501340777568},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1501340777569},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1501340777568},{"_id":"public/css/main.css","hash":"4364e115383639c3172755f11a859e3a84e6d7b8","modified":1501340777557},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1501340777569},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1501340777569},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1501340777569},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1501340777569},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1501340777569},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1501340777569},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1501340777569},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1501340777569},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1501340777569},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1501340777569},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1501340777602},{"_id":"source/CNAME","hash":"67786438eab8c2981027ccf5a01e94789496cd28","modified":1501050655904},{"_id":"public/CNAME","hash":"67786438eab8c2981027ccf5a01e94789496cd28","modified":1501340777501},{"_id":"source/images/travis-ci/build-status-pass.png","hash":"cfc3fffba1d20d78add073a67f0cfa22b75ed175","modified":1501055408177},{"_id":"public/images/travis-ci/build-status-pass.png","hash":"cfc3fffba1d20d78add073a67f0cfa22b75ed175","modified":1501340777500},{"_id":"source/images/travis-ci/settings-environment-variables.png","hash":"4324125a423513bc23d33969ba6d7bdace1cb5e6","modified":1501138417526},{"_id":"source/images/travis-ci/repoList.png","hash":"2138923499cd527099e81c8969a0486def8864b5","modified":1501340422839},{"_id":"source/images/travis-ci/settings-general.png","hash":"947b97eee079d75e044a487175bdff271770bf01","modified":1501138370805},{"_id":"source/images/travis-ci/index.png","hash":"e6d131725cdb1b9546f4e7765068ed49101c6db2","modified":1501135545935},{"_id":"public/images/travis-ci/repoList.png","hash":"2138923499cd527099e81c8969a0486def8864b5","modified":1501340777501},{"_id":"public/images/travis-ci/index.png","hash":"e6d131725cdb1b9546f4e7765068ed49101c6db2","modified":1501340777501},{"_id":"public/images/travis-ci/settings-general.png","hash":"947b97eee079d75e044a487175bdff271770bf01","modified":1501340777501},{"_id":"public/images/travis-ci/settings-environment-variables.png","hash":"4324125a423513bc23d33969ba6d7bdace1cb5e6","modified":1501340777501},{"_id":"source/images/travis-ci/encrypted.png","hash":"a9b4c544fcc280b942210b1a577ae84fe97f1109","modified":1501338936366},{"_id":"public/images/travis-ci/encrypted.png","hash":"a9b4c544fcc280b942210b1a577ae84fe97f1109","modified":1501340777501}],"Category":[{"name":"工具","_id":"cj5kmnn4u00045kv9s1domxil"}],"Data":[],"Page":[{"title":"分类","date":"2017-07-23T10:59:04.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-07-23 18:59:04\ntype: \"categories\"\n---\n","updated":"2017-07-24T04:43:04.611Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj5kmnn4h00005kv9p9dh1igu","content":"","excerpt":"","more":""},{"title":"标签","date":"2017-07-23T10:58:29.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-07-23 18:58:29\ntype: \"tags\"\n---\n","updated":"2017-07-24T04:43:04.622Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj5kmnn4p00025kv9d64exjti","content":"","excerpt":"","more":""}],"Post":[{"title":"使用Travis CI进行持续集成","date":"2017-07-25T11:51:19.000Z","_content":"\nTravis CI是当前最受欢迎的CI套件，Saas模式的服务独树一帜，流畅的使用方案让人欲罢不能。\n作为一个Saas模式的CI服务提供者，Travis CI为你的每次构建提供一个独立的构建环境，支持[多种语言](https://docs.travis-ci.com/user/languages/)，预置了多种环境配置模式，内置了多种发布模式。\n本文以Hexo博客构建并发布到github pages,以及Node工程构建并发布到私有服务器为例，介绍Travis的使用方式，帮助大家为自己的项目增加一枚构建徽记。\n[![Build Status](https://www.travis-ci.org/BroKun/blogSource.svg?branch=master)](https://www.travis-ci.org/BroKun/blogSource)\n\n<!--more-->\n\n## 在Travis CI上注册并关联项目\n对于github上的开源项目，访问[Travis CI](https://www.travis-ci.org/),点击右上角使用github帐号登录。\n![www.travis-ci.org](/images/travis-ci/index.png)\n\n登录以后在右上角的头像下，选择Accounts，会看到如下界面。\n![repo](/images/travis-ci/repoList.png)\n\ntravis已经给了你很详细的使用指导：\n  1.把开关打开 \n  2.添加配置文件 \n  3.提交代码触发。\n\n---\n\n  好了，全文完，谢谢大家！\n\n---\n\n大家在这里把开关打开就算完成了。\n\n## Hexo博客构建和部署github pages的配置\nHexo虽然提供了deploy到github的支持，但是对于更换机器等情况而言，依赖越多用起来越复杂，想随时随地往仓库里push一个md文件，就完成发布的话，就要考虑自动构建的方式了。\n\n使用travis来完成这项工作有两个选择:\n* 使用travis在自己的deploy选项，travis在近期加入了pages发布支持，只要配置几个主要信息，travis就可以完成发布动作。这个模式现在还是实验状态的，但是亲测可用。\n* 使用构建环境，手动把文件提交的github pages仓库。\n\n### 获取github token\n两种方式都需要使用github access token。所以我们先获取它。\n\n登录到github→在右上角头像的下拉选项中进入Settings→找到Personal access tokens选项→点击右上角Generate new token→填入描述信息，选好权限→mission complete!\n\n生成的token信息请妥善保管。\n\n### travis环境设置\n登录到travis，回到刚才repo列表页面，需要构建的项目开关旁边有一个设置按钮，点击进入设置。\n\n在General中把构建的触发条件选好。\n![settings-general](/images/travis-ci/settings-general.png)\n\n在Environment Variables中添加github token到环境变量\n![settings-environment-variables](/images/travis-ci/settings-environment-variables.png)\n\n### 使用travis的deploy\n在项目中添加.travis.yml文件，内容如下:\n```\nlanguage: node_js\nnode_js: stable\ninstall:\n- npm install\nscript:\n- hexo g\ndeploy:\n  provider: pages\n  local_dir: public/ #用于deploy的文件夹\n  repo: BroKun/BroKun.github.io #Repo slug\n  target_branch: master #分支\n  email: brokun0128@gmail.com #提交动作的使用的email\n  name: BroKun #提交动作使用的帐号\n  skip_cleanup: true\n  github_token: ${github_token} # Set in travis-ci.org dashboard\n  on:\n    branch: master\nbranches:\n  only:\n  - master\n```\ndepoly的详细说明参见[官方文档](https://docs.travis-ci.com/user/deployment/pages/)\n\n### 使用手动提交的方式\n在项目中添加.travis.yml文件，内容如下:\n```\nlanguage: node_js\nnode_js: stable\ninstall:\n- npm install\nscript:\n- hexo g\nafter_script:\n- cd ./public\n- git init\n- git config user.name \"BroKun\"\n- git config user.email \"brokun0128@gmail.com\"\n- git add .\n- git commit -m \"Update docs\"\n- git push --force --quiet \"https://${github_token}@${github_ref}\" master:master\nbranches:\n  only:\n  - master\nenv:\n  global:\n  - github_ref: github.com/BroKun/BroKun.github.io.git\n```\n\n## 构建Node工程并发布到私有服务器\n如果希望把工程发布到自己的服务器，需要需要做的会多一点，首先要明确如何去做这件事。我的选择是构建过程和测试在travis的环境中运行，通过ssh把源码发送到远程服务器，在远程执行部署脚本。\n\n### 配置远程ssh登录\n由于travis不支持交互式指令，所以采用ssh免密远程登陆的方式来访问远程服务器。\n#### 生成密钥对\n```shell\n$ ssh-keygen -t rsa\n```\n这里注意，生成私钥的时候，密码设置为空。\n#### 将公钥放在远程服务器上并设置受信\n```shell\n$ cat id_dsa.pub >> ~/.ssh/authorized_keys \n$ chmod 600 ~/.ssh/authorized_keys\n```\n#### 在需要部署的项目中添加私钥并加密\n在项目的git托管目录中，添加.travis文件夹，将刚刚生成的私钥放入文件夹中。熟悉密钥登录方式的应该知道，我们正常是在自己的机器上保存私钥，把公钥给自己管理的服务器，这里我们是希望travis的环境替代我们自己的机器。但是私钥放置在项目中意味着暴露在了网络空间，是很不安全的，所以我们使用[The Travis Client](https://github.com/travis-ci/travis.rb)加密私钥。\n\n安装Travis Client:\n```shell\n$ gem install travis\n```\n    PS:Travis Client是基于Ruby的，需要安装Ruby环境支持，我的机器为此增加了ruby rubygems ruby-devel等包，如果出现ruby版本问题，建议使用RVM。\n\n登录到Travis\n```shell\n$ travis login\n```\n填入自己的travis帐号或github帐号信息\n\n加密私钥\n```shell\n$ travis encrypt-file id_rsa --add\n```\n--add参数会在git仓库内的.travis.yml中增加\n```\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_cf2f27b2e746_key -iv $encrypted_cf2f27b2e746_iv\n  -in id_rsa.enc -out id_rsa -d\n```\n在travis网站上的项目配置里，也可以看到增加了两个环境变量\n![加密过的环境变量](/images/travis-ci/encrypted.png)\n\ntravis把解密需要的信息保存在了自己的服务器上，我们就不用担心私钥信息丢失了，这时候把项目仓库.travis文件夹里的原始私钥删除，只保留id_rsa.enc就可以了。\n\n### 在.travis.yml中编写构建和发布过程\n一个完整的例子如下:\n```\nsudo: false\nlanguage: node_js\nnode_js:\n- '7.10.1'\n\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_cf2f27b2e746_key -iv $encrypted_cf2f27b2e746_iv\n  -in .travis/id_rsa.enc -out ~/.ssh/id_rsa -d\n- chmod 600 ~/.ssh/id_rsa\n- echo -e \"Host 101.200.36.181\\n\\tStrictHostKeyChecking no\\n\" >> ~/.ssh/config\n- tar -czf relationship-server.tar.gz *\ninstall:\n- npm i npminstall && npminstall\nscript:\n- npm run ci\nafter_script:\n- npminstall codecov && codecov\n- npm i coveralls\n- cat ./coverage/lcov.info | node ./node_modules/coveralls/bin/coveralls\n- scp relationship-server.tar.gz brokun@101.200.36.181:~/\n- ssh brokun@101.200.36.181 'rm -rf relationship-server'\n- ssh brokun@101.200.36.181 'mkdir -p relationship-server && tar -xzvf relationship-server.tar.gz -C relationship-server'\n- ssh brokun@101.200.36.181 '. ./relationship-server.sh'\n```\n这里的Node程序使用了Egg框架，在travis上执行lint与单元测试。结束之后使用[coveralls](https://coveralls.io/)发布了测试结果。然后发布程序，在远程服务器上我预先放置了部署脚本，来完成程序重启相关的工作。\n需要注意的有:   \n1. Travis Client自动生成的解密脚本不能给出正确的加解密文件路径，需要手动调整。\n2. 私钥的文件访问权限一定要修改，脚本里还在.ssh文件夹增加了配置，关闭了对指定服务器的严格检查，否则会出现需要用户确认的步骤，导致脚本无法执行。","source":"_posts/使用Travis-CI进行持续集成.md","raw":"---\ntitle: 使用Travis CI进行持续集成\ndate: 2017-07-25 19:51:19\ntags:\n - 工具\n - CI\ncategories:\n - 工具\n---\n\nTravis CI是当前最受欢迎的CI套件，Saas模式的服务独树一帜，流畅的使用方案让人欲罢不能。\n作为一个Saas模式的CI服务提供者，Travis CI为你的每次构建提供一个独立的构建环境，支持[多种语言](https://docs.travis-ci.com/user/languages/)，预置了多种环境配置模式，内置了多种发布模式。\n本文以Hexo博客构建并发布到github pages,以及Node工程构建并发布到私有服务器为例，介绍Travis的使用方式，帮助大家为自己的项目增加一枚构建徽记。\n[![Build Status](https://www.travis-ci.org/BroKun/blogSource.svg?branch=master)](https://www.travis-ci.org/BroKun/blogSource)\n\n<!--more-->\n\n## 在Travis CI上注册并关联项目\n对于github上的开源项目，访问[Travis CI](https://www.travis-ci.org/),点击右上角使用github帐号登录。\n![www.travis-ci.org](/images/travis-ci/index.png)\n\n登录以后在右上角的头像下，选择Accounts，会看到如下界面。\n![repo](/images/travis-ci/repoList.png)\n\ntravis已经给了你很详细的使用指导：\n  1.把开关打开 \n  2.添加配置文件 \n  3.提交代码触发。\n\n---\n\n  好了，全文完，谢谢大家！\n\n---\n\n大家在这里把开关打开就算完成了。\n\n## Hexo博客构建和部署github pages的配置\nHexo虽然提供了deploy到github的支持，但是对于更换机器等情况而言，依赖越多用起来越复杂，想随时随地往仓库里push一个md文件，就完成发布的话，就要考虑自动构建的方式了。\n\n使用travis来完成这项工作有两个选择:\n* 使用travis在自己的deploy选项，travis在近期加入了pages发布支持，只要配置几个主要信息，travis就可以完成发布动作。这个模式现在还是实验状态的，但是亲测可用。\n* 使用构建环境，手动把文件提交的github pages仓库。\n\n### 获取github token\n两种方式都需要使用github access token。所以我们先获取它。\n\n登录到github→在右上角头像的下拉选项中进入Settings→找到Personal access tokens选项→点击右上角Generate new token→填入描述信息，选好权限→mission complete!\n\n生成的token信息请妥善保管。\n\n### travis环境设置\n登录到travis，回到刚才repo列表页面，需要构建的项目开关旁边有一个设置按钮，点击进入设置。\n\n在General中把构建的触发条件选好。\n![settings-general](/images/travis-ci/settings-general.png)\n\n在Environment Variables中添加github token到环境变量\n![settings-environment-variables](/images/travis-ci/settings-environment-variables.png)\n\n### 使用travis的deploy\n在项目中添加.travis.yml文件，内容如下:\n```\nlanguage: node_js\nnode_js: stable\ninstall:\n- npm install\nscript:\n- hexo g\ndeploy:\n  provider: pages\n  local_dir: public/ #用于deploy的文件夹\n  repo: BroKun/BroKun.github.io #Repo slug\n  target_branch: master #分支\n  email: brokun0128@gmail.com #提交动作的使用的email\n  name: BroKun #提交动作使用的帐号\n  skip_cleanup: true\n  github_token: ${github_token} # Set in travis-ci.org dashboard\n  on:\n    branch: master\nbranches:\n  only:\n  - master\n```\ndepoly的详细说明参见[官方文档](https://docs.travis-ci.com/user/deployment/pages/)\n\n### 使用手动提交的方式\n在项目中添加.travis.yml文件，内容如下:\n```\nlanguage: node_js\nnode_js: stable\ninstall:\n- npm install\nscript:\n- hexo g\nafter_script:\n- cd ./public\n- git init\n- git config user.name \"BroKun\"\n- git config user.email \"brokun0128@gmail.com\"\n- git add .\n- git commit -m \"Update docs\"\n- git push --force --quiet \"https://${github_token}@${github_ref}\" master:master\nbranches:\n  only:\n  - master\nenv:\n  global:\n  - github_ref: github.com/BroKun/BroKun.github.io.git\n```\n\n## 构建Node工程并发布到私有服务器\n如果希望把工程发布到自己的服务器，需要需要做的会多一点，首先要明确如何去做这件事。我的选择是构建过程和测试在travis的环境中运行，通过ssh把源码发送到远程服务器，在远程执行部署脚本。\n\n### 配置远程ssh登录\n由于travis不支持交互式指令，所以采用ssh免密远程登陆的方式来访问远程服务器。\n#### 生成密钥对\n```shell\n$ ssh-keygen -t rsa\n```\n这里注意，生成私钥的时候，密码设置为空。\n#### 将公钥放在远程服务器上并设置受信\n```shell\n$ cat id_dsa.pub >> ~/.ssh/authorized_keys \n$ chmod 600 ~/.ssh/authorized_keys\n```\n#### 在需要部署的项目中添加私钥并加密\n在项目的git托管目录中，添加.travis文件夹，将刚刚生成的私钥放入文件夹中。熟悉密钥登录方式的应该知道，我们正常是在自己的机器上保存私钥，把公钥给自己管理的服务器，这里我们是希望travis的环境替代我们自己的机器。但是私钥放置在项目中意味着暴露在了网络空间，是很不安全的，所以我们使用[The Travis Client](https://github.com/travis-ci/travis.rb)加密私钥。\n\n安装Travis Client:\n```shell\n$ gem install travis\n```\n    PS:Travis Client是基于Ruby的，需要安装Ruby环境支持，我的机器为此增加了ruby rubygems ruby-devel等包，如果出现ruby版本问题，建议使用RVM。\n\n登录到Travis\n```shell\n$ travis login\n```\n填入自己的travis帐号或github帐号信息\n\n加密私钥\n```shell\n$ travis encrypt-file id_rsa --add\n```\n--add参数会在git仓库内的.travis.yml中增加\n```\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_cf2f27b2e746_key -iv $encrypted_cf2f27b2e746_iv\n  -in id_rsa.enc -out id_rsa -d\n```\n在travis网站上的项目配置里，也可以看到增加了两个环境变量\n![加密过的环境变量](/images/travis-ci/encrypted.png)\n\ntravis把解密需要的信息保存在了自己的服务器上，我们就不用担心私钥信息丢失了，这时候把项目仓库.travis文件夹里的原始私钥删除，只保留id_rsa.enc就可以了。\n\n### 在.travis.yml中编写构建和发布过程\n一个完整的例子如下:\n```\nsudo: false\nlanguage: node_js\nnode_js:\n- '7.10.1'\n\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_cf2f27b2e746_key -iv $encrypted_cf2f27b2e746_iv\n  -in .travis/id_rsa.enc -out ~/.ssh/id_rsa -d\n- chmod 600 ~/.ssh/id_rsa\n- echo -e \"Host 101.200.36.181\\n\\tStrictHostKeyChecking no\\n\" >> ~/.ssh/config\n- tar -czf relationship-server.tar.gz *\ninstall:\n- npm i npminstall && npminstall\nscript:\n- npm run ci\nafter_script:\n- npminstall codecov && codecov\n- npm i coveralls\n- cat ./coverage/lcov.info | node ./node_modules/coveralls/bin/coveralls\n- scp relationship-server.tar.gz brokun@101.200.36.181:~/\n- ssh brokun@101.200.36.181 'rm -rf relationship-server'\n- ssh brokun@101.200.36.181 'mkdir -p relationship-server && tar -xzvf relationship-server.tar.gz -C relationship-server'\n- ssh brokun@101.200.36.181 '. ./relationship-server.sh'\n```\n这里的Node程序使用了Egg框架，在travis上执行lint与单元测试。结束之后使用[coveralls](https://coveralls.io/)发布了测试结果。然后发布程序，在远程服务器上我预先放置了部署脚本，来完成程序重启相关的工作。\n需要注意的有:   \n1. Travis Client自动生成的解密脚本不能给出正确的加解密文件路径，需要手动调整。\n2. 私钥的文件访问权限一定要修改，脚本里还在.ssh文件夹增加了配置，关闭了对指定服务器的严格检查，否则会出现需要用户确认的步骤，导致脚本无法执行。","slug":"使用Travis-CI进行持续集成","published":1,"updated":"2017-07-29T15:10:36.329Z","_id":"cj5kmnn4l00015kv923p0flcz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Travis CI是当前最受欢迎的CI套件，Saas模式的服务独树一帜，流畅的使用方案让人欲罢不能。<br>作为一个Saas模式的CI服务提供者，Travis CI为你的每次构建提供一个独立的构建环境，支持<a href=\"https://docs.travis-ci.com/user/languages/\" target=\"_blank\" rel=\"external\">多种语言</a>，预置了多种环境配置模式，内置了多种发布模式。<br>本文以Hexo博客构建并发布到github pages,以及Node工程构建并发布到私有服务器为例，介绍Travis的使用方式，帮助大家为自己的项目增加一枚构建徽记。<br><a href=\"https://www.travis-ci.org/BroKun/blogSource\" target=\"_blank\" rel=\"external\"><img src=\"https://www.travis-ci.org/BroKun/blogSource.svg?branch=master\" alt=\"Build Status\"></a></p>\n<a id=\"more\"></a>\n<h2 id=\"在Travis-CI上注册并关联项目\"><a href=\"#在Travis-CI上注册并关联项目\" class=\"headerlink\" title=\"在Travis CI上注册并关联项目\"></a>在Travis CI上注册并关联项目</h2><p>对于github上的开源项目，访问<a href=\"https://www.travis-ci.org/\" target=\"_blank\" rel=\"external\">Travis CI</a>,点击右上角使用github帐号登录。<br><img src=\"/images/travis-ci/index.png\" alt=\"www.travis-ci.org\"></p>\n<p>登录以后在右上角的头像下，选择Accounts，会看到如下界面。<br><img src=\"/images/travis-ci/repoList.png\" alt=\"repo\"></p>\n<p>travis已经给了你很详细的使用指导：<br>  1.把开关打开<br>  2.添加配置文件<br>  3.提交代码触发。</p>\n<hr>\n<p>  好了，全文完，谢谢大家！</p>\n<hr>\n<p>大家在这里把开关打开就算完成了。</p>\n<h2 id=\"Hexo博客构建和部署github-pages的配置\"><a href=\"#Hexo博客构建和部署github-pages的配置\" class=\"headerlink\" title=\"Hexo博客构建和部署github pages的配置\"></a>Hexo博客构建和部署github pages的配置</h2><p>Hexo虽然提供了deploy到github的支持，但是对于更换机器等情况而言，依赖越多用起来越复杂，想随时随地往仓库里push一个md文件，就完成发布的话，就要考虑自动构建的方式了。</p>\n<p>使用travis来完成这项工作有两个选择:</p>\n<ul>\n<li>使用travis在自己的deploy选项，travis在近期加入了pages发布支持，只要配置几个主要信息，travis就可以完成发布动作。这个模式现在还是实验状态的，但是亲测可用。</li>\n<li>使用构建环境，手动把文件提交的github pages仓库。</li>\n</ul>\n<h3 id=\"获取github-token\"><a href=\"#获取github-token\" class=\"headerlink\" title=\"获取github token\"></a>获取github token</h3><p>两种方式都需要使用github access token。所以我们先获取它。</p>\n<p>登录到github→在右上角头像的下拉选项中进入Settings→找到Personal access tokens选项→点击右上角Generate new token→填入描述信息，选好权限→mission complete!</p>\n<p>生成的token信息请妥善保管。</p>\n<h3 id=\"travis环境设置\"><a href=\"#travis环境设置\" class=\"headerlink\" title=\"travis环境设置\"></a>travis环境设置</h3><p>登录到travis，回到刚才repo列表页面，需要构建的项目开关旁边有一个设置按钮，点击进入设置。</p>\n<p>在General中把构建的触发条件选好。<br><img src=\"/images/travis-ci/settings-general.png\" alt=\"settings-general\"></p>\n<p>在Environment Variables中添加github token到环境变量<br><img src=\"/images/travis-ci/settings-environment-variables.png\" alt=\"settings-environment-variables\"></p>\n<h3 id=\"使用travis的deploy\"><a href=\"#使用travis的deploy\" class=\"headerlink\" title=\"使用travis的deploy\"></a>使用travis的deploy</h3><p>在项目中添加.travis.yml文件，内容如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">language: node_js</div><div class=\"line\">node_js: stable</div><div class=\"line\">install:</div><div class=\"line\">- npm install</div><div class=\"line\">script:</div><div class=\"line\">- hexo g</div><div class=\"line\">deploy:</div><div class=\"line\">  provider: pages</div><div class=\"line\">  local_dir: public/ #用于deploy的文件夹</div><div class=\"line\">  repo: BroKun/BroKun.github.io #Repo slug</div><div class=\"line\">  target_branch: master #分支</div><div class=\"line\">  email: brokun0128@gmail.com #提交动作的使用的email</div><div class=\"line\">  name: BroKun #提交动作使用的帐号</div><div class=\"line\">  skip_cleanup: true</div><div class=\"line\">  github_token: $&#123;github_token&#125; # Set in travis-ci.org dashboard</div><div class=\"line\">  on:</div><div class=\"line\">    branch: master</div><div class=\"line\">branches:</div><div class=\"line\">  only:</div><div class=\"line\">  - master</div></pre></td></tr></table></figure></p>\n<p>depoly的详细说明参见<a href=\"https://docs.travis-ci.com/user/deployment/pages/\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<h3 id=\"使用手动提交的方式\"><a href=\"#使用手动提交的方式\" class=\"headerlink\" title=\"使用手动提交的方式\"></a>使用手动提交的方式</h3><p>在项目中添加.travis.yml文件，内容如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">language: node_js</div><div class=\"line\">node_js: stable</div><div class=\"line\">install:</div><div class=\"line\">- npm install</div><div class=\"line\">script:</div><div class=\"line\">- hexo g</div><div class=\"line\">after_script:</div><div class=\"line\">- cd ./public</div><div class=\"line\">- git init</div><div class=\"line\">- git config user.name &quot;BroKun&quot;</div><div class=\"line\">- git config user.email &quot;brokun0128@gmail.com&quot;</div><div class=\"line\">- git add .</div><div class=\"line\">- git commit -m &quot;Update docs&quot;</div><div class=\"line\">- git push --force --quiet &quot;https://$&#123;github_token&#125;@$&#123;github_ref&#125;&quot; master:master</div><div class=\"line\">branches:</div><div class=\"line\">  only:</div><div class=\"line\">  - master</div><div class=\"line\">env:</div><div class=\"line\">  global:</div><div class=\"line\">  - github_ref: github.com/BroKun/BroKun.github.io.git</div></pre></td></tr></table></figure></p>\n<h2 id=\"构建Node工程并发布到私有服务器\"><a href=\"#构建Node工程并发布到私有服务器\" class=\"headerlink\" title=\"构建Node工程并发布到私有服务器\"></a>构建Node工程并发布到私有服务器</h2><p>如果希望把工程发布到自己的服务器，需要需要做的会多一点，首先要明确如何去做这件事。我的选择是构建过程和测试在travis的环境中运行，通过ssh把源码发送到远程服务器，在远程执行部署脚本。</p>\n<h3 id=\"配置远程ssh登录\"><a href=\"#配置远程ssh登录\" class=\"headerlink\" title=\"配置远程ssh登录\"></a>配置远程ssh登录</h3><p>由于travis不支持交互式指令，所以采用ssh免密远程登陆的方式来访问远程服务器。</p>\n<h4 id=\"生成密钥对\"><a href=\"#生成密钥对\" class=\"headerlink\" title=\"生成密钥对\"></a>生成密钥对</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ssh-keygen -t rsa</div></pre></td></tr></table></figure>\n<p>这里注意，生成私钥的时候，密码设置为空。</p>\n<h4 id=\"将公钥放在远程服务器上并设置受信\"><a href=\"#将公钥放在远程服务器上并设置受信\" class=\"headerlink\" title=\"将公钥放在远程服务器上并设置受信\"></a>将公钥放在远程服务器上并设置受信</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> cat id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys </div><div class=\"line\"><span class=\"meta\">$</span> chmod 600 ~/.ssh/authorized_keys</div></pre></td></tr></table></figure>\n<h4 id=\"在需要部署的项目中添加私钥并加密\"><a href=\"#在需要部署的项目中添加私钥并加密\" class=\"headerlink\" title=\"在需要部署的项目中添加私钥并加密\"></a>在需要部署的项目中添加私钥并加密</h4><p>在项目的git托管目录中，添加.travis文件夹，将刚刚生成的私钥放入文件夹中。熟悉密钥登录方式的应该知道，我们正常是在自己的机器上保存私钥，把公钥给自己管理的服务器，这里我们是希望travis的环境替代我们自己的机器。但是私钥放置在项目中意味着暴露在了网络空间，是很不安全的，所以我们使用<a href=\"https://github.com/travis-ci/travis.rb\" target=\"_blank\" rel=\"external\">The Travis Client</a>加密私钥。</p>\n<p>安装Travis Client:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> gem install travis</div></pre></td></tr></table></figure></p>\n<pre><code>PS:Travis Client是基于Ruby的，需要安装Ruby环境支持，我的机器为此增加了ruby rubygems ruby-devel等包，如果出现ruby版本问题，建议使用RVM。\n</code></pre><p>登录到Travis<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> travis login</div></pre></td></tr></table></figure></p>\n<p>填入自己的travis帐号或github帐号信息</p>\n<p>加密私钥<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> travis encrypt-file id_rsa --add</div></pre></td></tr></table></figure></p>\n<p>–add参数会在git仓库内的.travis.yml中增加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">before_install:</div><div class=\"line\">- openssl aes-256-cbc -K $encrypted_cf2f27b2e746_key -iv $encrypted_cf2f27b2e746_iv</div><div class=\"line\">  -in id_rsa.enc -out id_rsa -d</div></pre></td></tr></table></figure></p>\n<p>在travis网站上的项目配置里，也可以看到增加了两个环境变量<br><img src=\"/images/travis-ci/encrypted.png\" alt=\"加密过的环境变量\"></p>\n<p>travis把解密需要的信息保存在了自己的服务器上，我们就不用担心私钥信息丢失了，这时候把项目仓库.travis文件夹里的原始私钥删除，只保留id_rsa.enc就可以了。</p>\n<h3 id=\"在-travis-yml中编写构建和发布过程\"><a href=\"#在-travis-yml中编写构建和发布过程\" class=\"headerlink\" title=\"在.travis.yml中编写构建和发布过程\"></a>在.travis.yml中编写构建和发布过程</h3><p>一个完整的例子如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo: false</div><div class=\"line\">language: node_js</div><div class=\"line\">node_js:</div><div class=\"line\">- &apos;7.10.1&apos;</div><div class=\"line\"></div><div class=\"line\">before_install:</div><div class=\"line\">- openssl aes-256-cbc -K $encrypted_cf2f27b2e746_key -iv $encrypted_cf2f27b2e746_iv</div><div class=\"line\">  -in .travis/id_rsa.enc -out ~/.ssh/id_rsa -d</div><div class=\"line\">- chmod 600 ~/.ssh/id_rsa</div><div class=\"line\">- echo -e &quot;Host 101.200.36.181\\n\\tStrictHostKeyChecking no\\n&quot; &gt;&gt; ~/.ssh/config</div><div class=\"line\">- tar -czf relationship-server.tar.gz *</div><div class=\"line\">install:</div><div class=\"line\">- npm i npminstall &amp;&amp; npminstall</div><div class=\"line\">script:</div><div class=\"line\">- npm run ci</div><div class=\"line\">after_script:</div><div class=\"line\">- npminstall codecov &amp;&amp; codecov</div><div class=\"line\">- npm i coveralls</div><div class=\"line\">- cat ./coverage/lcov.info | node ./node_modules/coveralls/bin/coveralls</div><div class=\"line\">- scp relationship-server.tar.gz brokun@101.200.36.181:~/</div><div class=\"line\">- ssh brokun@101.200.36.181 &apos;rm -rf relationship-server&apos;</div><div class=\"line\">- ssh brokun@101.200.36.181 &apos;mkdir -p relationship-server &amp;&amp; tar -xzvf relationship-server.tar.gz -C relationship-server&apos;</div><div class=\"line\">- ssh brokun@101.200.36.181 &apos;. ./relationship-server.sh&apos;</div></pre></td></tr></table></figure></p>\n<p>这里的Node程序使用了Egg框架，在travis上执行lint与单元测试。结束之后使用<a href=\"https://coveralls.io/\" target=\"_blank\" rel=\"external\">coveralls</a>发布了测试结果。然后发布程序，在远程服务器上我预先放置了部署脚本，来完成程序重启相关的工作。<br>需要注意的有:   </p>\n<ol>\n<li>Travis Client自动生成的解密脚本不能给出正确的加解密文件路径，需要手动调整。</li>\n<li>私钥的文件访问权限一定要修改，脚本里还在.ssh文件夹增加了配置，关闭了对指定服务器的严格检查，否则会出现需要用户确认的步骤，导致脚本无法执行。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Travis CI是当前最受欢迎的CI套件，Saas模式的服务独树一帜，流畅的使用方案让人欲罢不能。<br>作为一个Saas模式的CI服务提供者，Travis CI为你的每次构建提供一个独立的构建环境，支持<a href=\"https://docs.travis-ci.com/user/languages/\" target=\"_blank\" rel=\"external\">多种语言</a>，预置了多种环境配置模式，内置了多种发布模式。<br>本文以Hexo博客构建并发布到github pages,以及Node工程构建并发布到私有服务器为例，介绍Travis的使用方式，帮助大家为自己的项目增加一枚构建徽记。<br><a href=\"https://www.travis-ci.org/BroKun/blogSource\" target=\"_blank\" rel=\"external\"><img src=\"https://www.travis-ci.org/BroKun/blogSource.svg?branch=master\" alt=\"Build Status\"></a></p>","more":"<h2 id=\"在Travis-CI上注册并关联项目\"><a href=\"#在Travis-CI上注册并关联项目\" class=\"headerlink\" title=\"在Travis CI上注册并关联项目\"></a>在Travis CI上注册并关联项目</h2><p>对于github上的开源项目，访问<a href=\"https://www.travis-ci.org/\" target=\"_blank\" rel=\"external\">Travis CI</a>,点击右上角使用github帐号登录。<br><img src=\"/images/travis-ci/index.png\" alt=\"www.travis-ci.org\"></p>\n<p>登录以后在右上角的头像下，选择Accounts，会看到如下界面。<br><img src=\"/images/travis-ci/repoList.png\" alt=\"repo\"></p>\n<p>travis已经给了你很详细的使用指导：<br>  1.把开关打开<br>  2.添加配置文件<br>  3.提交代码触发。</p>\n<hr>\n<p>  好了，全文完，谢谢大家！</p>\n<hr>\n<p>大家在这里把开关打开就算完成了。</p>\n<h2 id=\"Hexo博客构建和部署github-pages的配置\"><a href=\"#Hexo博客构建和部署github-pages的配置\" class=\"headerlink\" title=\"Hexo博客构建和部署github pages的配置\"></a>Hexo博客构建和部署github pages的配置</h2><p>Hexo虽然提供了deploy到github的支持，但是对于更换机器等情况而言，依赖越多用起来越复杂，想随时随地往仓库里push一个md文件，就完成发布的话，就要考虑自动构建的方式了。</p>\n<p>使用travis来完成这项工作有两个选择:</p>\n<ul>\n<li>使用travis在自己的deploy选项，travis在近期加入了pages发布支持，只要配置几个主要信息，travis就可以完成发布动作。这个模式现在还是实验状态的，但是亲测可用。</li>\n<li>使用构建环境，手动把文件提交的github pages仓库。</li>\n</ul>\n<h3 id=\"获取github-token\"><a href=\"#获取github-token\" class=\"headerlink\" title=\"获取github token\"></a>获取github token</h3><p>两种方式都需要使用github access token。所以我们先获取它。</p>\n<p>登录到github→在右上角头像的下拉选项中进入Settings→找到Personal access tokens选项→点击右上角Generate new token→填入描述信息，选好权限→mission complete!</p>\n<p>生成的token信息请妥善保管。</p>\n<h3 id=\"travis环境设置\"><a href=\"#travis环境设置\" class=\"headerlink\" title=\"travis环境设置\"></a>travis环境设置</h3><p>登录到travis，回到刚才repo列表页面，需要构建的项目开关旁边有一个设置按钮，点击进入设置。</p>\n<p>在General中把构建的触发条件选好。<br><img src=\"/images/travis-ci/settings-general.png\" alt=\"settings-general\"></p>\n<p>在Environment Variables中添加github token到环境变量<br><img src=\"/images/travis-ci/settings-environment-variables.png\" alt=\"settings-environment-variables\"></p>\n<h3 id=\"使用travis的deploy\"><a href=\"#使用travis的deploy\" class=\"headerlink\" title=\"使用travis的deploy\"></a>使用travis的deploy</h3><p>在项目中添加.travis.yml文件，内容如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">language: node_js</div><div class=\"line\">node_js: stable</div><div class=\"line\">install:</div><div class=\"line\">- npm install</div><div class=\"line\">script:</div><div class=\"line\">- hexo g</div><div class=\"line\">deploy:</div><div class=\"line\">  provider: pages</div><div class=\"line\">  local_dir: public/ #用于deploy的文件夹</div><div class=\"line\">  repo: BroKun/BroKun.github.io #Repo slug</div><div class=\"line\">  target_branch: master #分支</div><div class=\"line\">  email: brokun0128@gmail.com #提交动作的使用的email</div><div class=\"line\">  name: BroKun #提交动作使用的帐号</div><div class=\"line\">  skip_cleanup: true</div><div class=\"line\">  github_token: $&#123;github_token&#125; # Set in travis-ci.org dashboard</div><div class=\"line\">  on:</div><div class=\"line\">    branch: master</div><div class=\"line\">branches:</div><div class=\"line\">  only:</div><div class=\"line\">  - master</div></pre></td></tr></table></figure></p>\n<p>depoly的详细说明参见<a href=\"https://docs.travis-ci.com/user/deployment/pages/\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<h3 id=\"使用手动提交的方式\"><a href=\"#使用手动提交的方式\" class=\"headerlink\" title=\"使用手动提交的方式\"></a>使用手动提交的方式</h3><p>在项目中添加.travis.yml文件，内容如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">language: node_js</div><div class=\"line\">node_js: stable</div><div class=\"line\">install:</div><div class=\"line\">- npm install</div><div class=\"line\">script:</div><div class=\"line\">- hexo g</div><div class=\"line\">after_script:</div><div class=\"line\">- cd ./public</div><div class=\"line\">- git init</div><div class=\"line\">- git config user.name &quot;BroKun&quot;</div><div class=\"line\">- git config user.email &quot;brokun0128@gmail.com&quot;</div><div class=\"line\">- git add .</div><div class=\"line\">- git commit -m &quot;Update docs&quot;</div><div class=\"line\">- git push --force --quiet &quot;https://$&#123;github_token&#125;@$&#123;github_ref&#125;&quot; master:master</div><div class=\"line\">branches:</div><div class=\"line\">  only:</div><div class=\"line\">  - master</div><div class=\"line\">env:</div><div class=\"line\">  global:</div><div class=\"line\">  - github_ref: github.com/BroKun/BroKun.github.io.git</div></pre></td></tr></table></figure></p>\n<h2 id=\"构建Node工程并发布到私有服务器\"><a href=\"#构建Node工程并发布到私有服务器\" class=\"headerlink\" title=\"构建Node工程并发布到私有服务器\"></a>构建Node工程并发布到私有服务器</h2><p>如果希望把工程发布到自己的服务器，需要需要做的会多一点，首先要明确如何去做这件事。我的选择是构建过程和测试在travis的环境中运行，通过ssh把源码发送到远程服务器，在远程执行部署脚本。</p>\n<h3 id=\"配置远程ssh登录\"><a href=\"#配置远程ssh登录\" class=\"headerlink\" title=\"配置远程ssh登录\"></a>配置远程ssh登录</h3><p>由于travis不支持交互式指令，所以采用ssh免密远程登陆的方式来访问远程服务器。</p>\n<h4 id=\"生成密钥对\"><a href=\"#生成密钥对\" class=\"headerlink\" title=\"生成密钥对\"></a>生成密钥对</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ssh-keygen -t rsa</div></pre></td></tr></table></figure>\n<p>这里注意，生成私钥的时候，密码设置为空。</p>\n<h4 id=\"将公钥放在远程服务器上并设置受信\"><a href=\"#将公钥放在远程服务器上并设置受信\" class=\"headerlink\" title=\"将公钥放在远程服务器上并设置受信\"></a>将公钥放在远程服务器上并设置受信</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> cat id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys </div><div class=\"line\"><span class=\"meta\">$</span> chmod 600 ~/.ssh/authorized_keys</div></pre></td></tr></table></figure>\n<h4 id=\"在需要部署的项目中添加私钥并加密\"><a href=\"#在需要部署的项目中添加私钥并加密\" class=\"headerlink\" title=\"在需要部署的项目中添加私钥并加密\"></a>在需要部署的项目中添加私钥并加密</h4><p>在项目的git托管目录中，添加.travis文件夹，将刚刚生成的私钥放入文件夹中。熟悉密钥登录方式的应该知道，我们正常是在自己的机器上保存私钥，把公钥给自己管理的服务器，这里我们是希望travis的环境替代我们自己的机器。但是私钥放置在项目中意味着暴露在了网络空间，是很不安全的，所以我们使用<a href=\"https://github.com/travis-ci/travis.rb\" target=\"_blank\" rel=\"external\">The Travis Client</a>加密私钥。</p>\n<p>安装Travis Client:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> gem install travis</div></pre></td></tr></table></figure></p>\n<pre><code>PS:Travis Client是基于Ruby的，需要安装Ruby环境支持，我的机器为此增加了ruby rubygems ruby-devel等包，如果出现ruby版本问题，建议使用RVM。\n</code></pre><p>登录到Travis<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> travis login</div></pre></td></tr></table></figure></p>\n<p>填入自己的travis帐号或github帐号信息</p>\n<p>加密私钥<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> travis encrypt-file id_rsa --add</div></pre></td></tr></table></figure></p>\n<p>–add参数会在git仓库内的.travis.yml中增加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">before_install:</div><div class=\"line\">- openssl aes-256-cbc -K $encrypted_cf2f27b2e746_key -iv $encrypted_cf2f27b2e746_iv</div><div class=\"line\">  -in id_rsa.enc -out id_rsa -d</div></pre></td></tr></table></figure></p>\n<p>在travis网站上的项目配置里，也可以看到增加了两个环境变量<br><img src=\"/images/travis-ci/encrypted.png\" alt=\"加密过的环境变量\"></p>\n<p>travis把解密需要的信息保存在了自己的服务器上，我们就不用担心私钥信息丢失了，这时候把项目仓库.travis文件夹里的原始私钥删除，只保留id_rsa.enc就可以了。</p>\n<h3 id=\"在-travis-yml中编写构建和发布过程\"><a href=\"#在-travis-yml中编写构建和发布过程\" class=\"headerlink\" title=\"在.travis.yml中编写构建和发布过程\"></a>在.travis.yml中编写构建和发布过程</h3><p>一个完整的例子如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo: false</div><div class=\"line\">language: node_js</div><div class=\"line\">node_js:</div><div class=\"line\">- &apos;7.10.1&apos;</div><div class=\"line\"></div><div class=\"line\">before_install:</div><div class=\"line\">- openssl aes-256-cbc -K $encrypted_cf2f27b2e746_key -iv $encrypted_cf2f27b2e746_iv</div><div class=\"line\">  -in .travis/id_rsa.enc -out ~/.ssh/id_rsa -d</div><div class=\"line\">- chmod 600 ~/.ssh/id_rsa</div><div class=\"line\">- echo -e &quot;Host 101.200.36.181\\n\\tStrictHostKeyChecking no\\n&quot; &gt;&gt; ~/.ssh/config</div><div class=\"line\">- tar -czf relationship-server.tar.gz *</div><div class=\"line\">install:</div><div class=\"line\">- npm i npminstall &amp;&amp; npminstall</div><div class=\"line\">script:</div><div class=\"line\">- npm run ci</div><div class=\"line\">after_script:</div><div class=\"line\">- npminstall codecov &amp;&amp; codecov</div><div class=\"line\">- npm i coveralls</div><div class=\"line\">- cat ./coverage/lcov.info | node ./node_modules/coveralls/bin/coveralls</div><div class=\"line\">- scp relationship-server.tar.gz brokun@101.200.36.181:~/</div><div class=\"line\">- ssh brokun@101.200.36.181 &apos;rm -rf relationship-server&apos;</div><div class=\"line\">- ssh brokun@101.200.36.181 &apos;mkdir -p relationship-server &amp;&amp; tar -xzvf relationship-server.tar.gz -C relationship-server&apos;</div><div class=\"line\">- ssh brokun@101.200.36.181 &apos;. ./relationship-server.sh&apos;</div></pre></td></tr></table></figure></p>\n<p>这里的Node程序使用了Egg框架，在travis上执行lint与单元测试。结束之后使用<a href=\"https://coveralls.io/\" target=\"_blank\" rel=\"external\">coveralls</a>发布了测试结果。然后发布程序，在远程服务器上我预先放置了部署脚本，来完成程序重启相关的工作。<br>需要注意的有:   </p>\n<ol>\n<li>Travis Client自动生成的解密脚本不能给出正确的加解密文件路径，需要手动调整。</li>\n<li>私钥的文件访问权限一定要修改，脚本里还在.ssh文件夹增加了配置，关闭了对指定服务器的严格检查，否则会出现需要用户确认的步骤，导致脚本无法执行。</li>\n</ol>"},{"title":"使用GitLab CI进行持续集成","date":"2017-07-23T10:38:48.000Z","_content":"\n从GitLab8.0开始，就内置了GitLab CI，不管围绕着gitlab建立了怎样的workflow，CI都是不可缺少的。\n如果你的团队使用GitLab，同时又希望研发人员自己承担DevOps的角色，那GitLab CI将是你很好的选择。\n<!--more-->\n\n![image](https://docs.gitlab.com/ee/ci/img/cicd_pipeline_infograph.png)\n\n# 特点\n* GitLab CI的构建流程依托于每台服务器上的GitLab Runner，Runner需要主动注册到Gitlab CI，免去了复杂认证设置，Runner直接在服务器上运行，对本地的操作也会更方便。\n* PipeLine依托在项目中配置的.gitlab-ci.yml文件，构建过程管理与研发流程贴得更近。\n\n\n\n## 说明\n### GitLab Runner\n构建过程的执行者，使用Go语言编写，只要能跑Go的地方就能跑。\nRunner分为Specific Runner与Share Runner。Shared Runner只有系统管理元可以创建，为多个项目服务。Specific Runner有工程访问权限的人都可以创建，大多数情况下，Specific Runner足够使用。\n\n\n# 使用步骤\n这里以我需要配置的一个工程为例。\n* 服务器操作系统：CentOS 7\n* GitLab：8.17.x\n* 工程语言: Node.js\n\n## 安装 GitLab Runner\n安装GitLab Runner前，首先要搞清楚自己的GitLab版本，根据[官方文档](https://gitlab.com/gitlab-org/gitlab-ci-multi-runner)给出的对应表找到自己可用的Runner版本。我这里选择使用v1.11.x\n\n```\nroot@host:# yum install gitlab-ci-multi-runner-1.11.2-1\n```\nGitLab Runner会在服务器上创建gitlab-runner用户，该用户的目录会生成builds文件夹，里面为每个runner建立一个文件夹，文件夹内部放置由该runner管理的信息。\n\n其他参考 [官方说明](https://docs.gitlab.com/runner/install/)\n\n## 注册 GitLab Runner\n我这里选择注册一个Specific Runner，需要Url和Token，这两个信息可以从GitLab的项目设置里拿到。位置在设置->runners\n\n![image](/images/gitlab-ci/runner-url-token.png)\n\n```\nroot@host:# gitlab-runner register\n```\n然后根据提示依次输入URL、Token等信息   \n其中tags信息，Whether to run untagged builds与runner执行的触发有关。   \nexecutor 可以选定命令执行器，为了方便，我选择了shell\n\n注册成功以后，可以看到如下字样：\n```\nRunner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! \n```\n同时会在 /etc/gitlab-runner/config.toml 生成一份配置文件，可以再次修改部分配置信息，runner会自动重启。\n在gitlab的runner配置项中，此时也可以看到该runner的，也可以在这里修改runner描述信息和tags等。\n![image](/images/gitlab-ci/runner-added.png)\n\n一个注册好的runner在其他的代码仓库也是可以看到的，可以选择在多个项目中启用。\n![image](/images/gitlab-ci/runner-exist.png)\n\n## 配置.gitlab-ci.yml\n配置好runner以后，在项目中添加.gitlab-ci.yml文件以触发runner的执行。\n\n### 概念\n![image](https://docs.gitlab.com/ee/ci/img/pipelines_grouped.png)\n\nGitLab的CI构建过程分为Pipeline、stage、job三个层次。   \nPipeline是指的一个可执行的构建过程。   \nstage是Pipeline的执行阶段。   \njob是一个具体的执行单元，job里包含的信息最多，需要指明自己所属的stage，需要执行的命令，在什么情况下执行，在哪里执行等。\n\n\n### 示例配置文件\n先给出配置文件:\n\n```\nstages:\n  - install\n  - test\n  - deploy\n\ncache:\n  key: ${CI_BUILD_REF_NAME}\n  paths:\n    - node_modules/\n\n# 安装依赖\ninstall:\n  stage: install\n  only:\n    - dev\n  script:\n    - npm install\n\n# 运行测试用例\ntest:\n  stage: test\n  only:\n    - dev\n  script:\n    - npm run test\n  allow_failure: true\n\n# 开发环境部署到pm2\ndeploy_dev:\n  stage: deploy\n  only:\n    - dev\n  tags:\n    - dev\n  script:\n    - pm2 delete dev || true\n    - pm2 start config/pm2-dev.json --name dev\n\n# 测试环境部署到pm2\ndeploy_test:\n  stage: deploy\n  only:\n    - dev\n  tags:\n    - test\n  script:\n    - pm2 delete test || true\n    - pm2 start config/pm2-test.json --name test\n```\n\n这份配置文件描述了一个由install、test、deploy三个stage组成的Pipeline，全部由dev分支的更新触发，install和test两个job是公共的，deploy_dev、deploy_test分别在开发和测试两个环境的runner上执行部署。\n\n### 执行方式和注意事项\ngitlab会监视仓库内每个分支上的.gitlab-ci.yml文件，在仓库更新的时候触发构建动作。\n一个仓库内可以有多个.gitlab-ci.yml文件，每个文件都可以成为一个Pipeline,GitLab通过对job的解析，job指定的分支与当前分支对应，并且根据tags等信息匹配到runner时，构成一条可用的Pipeline。\n可用的Pipeline可以在gitlab上直接查看。\n![image](/images/gitlab-ci/pipeline.png)\n\njob通过stage标明自己所属的阶段，通过only和except来选定可以触发执行的分支。通过tags来指定执行命令的具体runner，当没有tags的时候，所有允许执行没有标签的作业的runner来执行命令。\n建议大家在配置的时候，建立好tags的对应关系。\n\n### 文件格式\n配置文件中除了保留字及其含义，搬运自官方文档:\n|Keyword|Required|Description|   \n|:------|:-------|:---------|   \n|image |no |Use docker image, covered in Use Docker|\n|services\t|no\t|Use docker services, covered in Use Docker|\n|stages\t|no\t|Define build stages|\n|types\t|no\t|Alias for stages (deprecated)|\n|before_script\t|no\t|Define commands that run before each job's script|\n|after_script\t|no\t|Define commands that run after each job's script|\n|variables\t|no\t|Define build variables|\n|cache\t|no\t|Define list of files that should be cached between subsequent runs|\n\n除此之外的key，都被定义为job，在我给出的配置文件中，install、test、deploy_dev、deploy_test均为job。job定义的属性为:\n|Keyword\t|Required\t|Description|  \n|:------|:-------|:---------| \n|script\t|yes\t|Defines a shell script which is executed by Runner|\n|image\t|no\t|Use docker image, covered in Using Docker Images|\n|services\t|no\t|Use docker services, covered in Using Docker Images|\n|stage\t|no\t|Defines a job stage (default: test)|\n|type\t|no\t|Alias for stage|\n|variables\t|no\t|Define job variables on a job level|\n|only\t|no\t|Defines a list of git refs for which job is created|\n|except\t|no\t|Defines a list of git refs for which job is not created|\n|tags\t|no\t|Defines a list of tags which are used to select Runner|\n|allow_failure\t|no\t|Allow job to fail. Failed job doesn't contribute to commit status|\n|when\t|no\t|Define when to run job. Can be on_success, on_failure, always or manual|\n|dependencies\t|no\t|Define other jobs that a job depends on so that you can pass artifacts between them|\n|artifacts\t|no\t|Define list of job artifacts|\n|cache\t|no\t|Define list of files that should be cached between subsequent runs|\n|before_script\t|no\t|Override a set of commands that are executed before job|\n|after_script\t|no\t|Override a set of commands that are executed after job|\n|environment\t|no\t|Defines a name of environment to which deployment is done by this job|\n|coverage\t|no\t|Define code coverage settings for a given job|\n|retry\t|no\t|Define how many times a job can be auto-retried in case of a failure|\n\n更多参考 [官方说明](https://docs.gitlab.com/ee/ci/yaml/README.html)\n\n## 结果查看\n配置结束以后，就可以在GitLab的Pipeline和Jobs两个地方看到执行情况了，在Jobs的位置可以看到每个步骤在服务器上的执行情况。\n![image](/images/gitlab-ci/jobs.png)\n","source":"_posts/使用GitLab-CI进行持续集成.md","raw":"---\ntitle: 使用GitLab CI进行持续集成\ndate: 2017-07-23 18:38:48\ntags:\n - 工具\n - CI\ncategories:\n - 工具\n---\n\n从GitLab8.0开始，就内置了GitLab CI，不管围绕着gitlab建立了怎样的workflow，CI都是不可缺少的。\n如果你的团队使用GitLab，同时又希望研发人员自己承担DevOps的角色，那GitLab CI将是你很好的选择。\n<!--more-->\n\n![image](https://docs.gitlab.com/ee/ci/img/cicd_pipeline_infograph.png)\n\n# 特点\n* GitLab CI的构建流程依托于每台服务器上的GitLab Runner，Runner需要主动注册到Gitlab CI，免去了复杂认证设置，Runner直接在服务器上运行，对本地的操作也会更方便。\n* PipeLine依托在项目中配置的.gitlab-ci.yml文件，构建过程管理与研发流程贴得更近。\n\n\n\n## 说明\n### GitLab Runner\n构建过程的执行者，使用Go语言编写，只要能跑Go的地方就能跑。\nRunner分为Specific Runner与Share Runner。Shared Runner只有系统管理元可以创建，为多个项目服务。Specific Runner有工程访问权限的人都可以创建，大多数情况下，Specific Runner足够使用。\n\n\n# 使用步骤\n这里以我需要配置的一个工程为例。\n* 服务器操作系统：CentOS 7\n* GitLab：8.17.x\n* 工程语言: Node.js\n\n## 安装 GitLab Runner\n安装GitLab Runner前，首先要搞清楚自己的GitLab版本，根据[官方文档](https://gitlab.com/gitlab-org/gitlab-ci-multi-runner)给出的对应表找到自己可用的Runner版本。我这里选择使用v1.11.x\n\n```\nroot@host:# yum install gitlab-ci-multi-runner-1.11.2-1\n```\nGitLab Runner会在服务器上创建gitlab-runner用户，该用户的目录会生成builds文件夹，里面为每个runner建立一个文件夹，文件夹内部放置由该runner管理的信息。\n\n其他参考 [官方说明](https://docs.gitlab.com/runner/install/)\n\n## 注册 GitLab Runner\n我这里选择注册一个Specific Runner，需要Url和Token，这两个信息可以从GitLab的项目设置里拿到。位置在设置->runners\n\n![image](/images/gitlab-ci/runner-url-token.png)\n\n```\nroot@host:# gitlab-runner register\n```\n然后根据提示依次输入URL、Token等信息   \n其中tags信息，Whether to run untagged builds与runner执行的触发有关。   \nexecutor 可以选定命令执行器，为了方便，我选择了shell\n\n注册成功以后，可以看到如下字样：\n```\nRunner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! \n```\n同时会在 /etc/gitlab-runner/config.toml 生成一份配置文件，可以再次修改部分配置信息，runner会自动重启。\n在gitlab的runner配置项中，此时也可以看到该runner的，也可以在这里修改runner描述信息和tags等。\n![image](/images/gitlab-ci/runner-added.png)\n\n一个注册好的runner在其他的代码仓库也是可以看到的，可以选择在多个项目中启用。\n![image](/images/gitlab-ci/runner-exist.png)\n\n## 配置.gitlab-ci.yml\n配置好runner以后，在项目中添加.gitlab-ci.yml文件以触发runner的执行。\n\n### 概念\n![image](https://docs.gitlab.com/ee/ci/img/pipelines_grouped.png)\n\nGitLab的CI构建过程分为Pipeline、stage、job三个层次。   \nPipeline是指的一个可执行的构建过程。   \nstage是Pipeline的执行阶段。   \njob是一个具体的执行单元，job里包含的信息最多，需要指明自己所属的stage，需要执行的命令，在什么情况下执行，在哪里执行等。\n\n\n### 示例配置文件\n先给出配置文件:\n\n```\nstages:\n  - install\n  - test\n  - deploy\n\ncache:\n  key: ${CI_BUILD_REF_NAME}\n  paths:\n    - node_modules/\n\n# 安装依赖\ninstall:\n  stage: install\n  only:\n    - dev\n  script:\n    - npm install\n\n# 运行测试用例\ntest:\n  stage: test\n  only:\n    - dev\n  script:\n    - npm run test\n  allow_failure: true\n\n# 开发环境部署到pm2\ndeploy_dev:\n  stage: deploy\n  only:\n    - dev\n  tags:\n    - dev\n  script:\n    - pm2 delete dev || true\n    - pm2 start config/pm2-dev.json --name dev\n\n# 测试环境部署到pm2\ndeploy_test:\n  stage: deploy\n  only:\n    - dev\n  tags:\n    - test\n  script:\n    - pm2 delete test || true\n    - pm2 start config/pm2-test.json --name test\n```\n\n这份配置文件描述了一个由install、test、deploy三个stage组成的Pipeline，全部由dev分支的更新触发，install和test两个job是公共的，deploy_dev、deploy_test分别在开发和测试两个环境的runner上执行部署。\n\n### 执行方式和注意事项\ngitlab会监视仓库内每个分支上的.gitlab-ci.yml文件，在仓库更新的时候触发构建动作。\n一个仓库内可以有多个.gitlab-ci.yml文件，每个文件都可以成为一个Pipeline,GitLab通过对job的解析，job指定的分支与当前分支对应，并且根据tags等信息匹配到runner时，构成一条可用的Pipeline。\n可用的Pipeline可以在gitlab上直接查看。\n![image](/images/gitlab-ci/pipeline.png)\n\njob通过stage标明自己所属的阶段，通过only和except来选定可以触发执行的分支。通过tags来指定执行命令的具体runner，当没有tags的时候，所有允许执行没有标签的作业的runner来执行命令。\n建议大家在配置的时候，建立好tags的对应关系。\n\n### 文件格式\n配置文件中除了保留字及其含义，搬运自官方文档:\n|Keyword|Required|Description|   \n|:------|:-------|:---------|   \n|image |no |Use docker image, covered in Use Docker|\n|services\t|no\t|Use docker services, covered in Use Docker|\n|stages\t|no\t|Define build stages|\n|types\t|no\t|Alias for stages (deprecated)|\n|before_script\t|no\t|Define commands that run before each job's script|\n|after_script\t|no\t|Define commands that run after each job's script|\n|variables\t|no\t|Define build variables|\n|cache\t|no\t|Define list of files that should be cached between subsequent runs|\n\n除此之外的key，都被定义为job，在我给出的配置文件中，install、test、deploy_dev、deploy_test均为job。job定义的属性为:\n|Keyword\t|Required\t|Description|  \n|:------|:-------|:---------| \n|script\t|yes\t|Defines a shell script which is executed by Runner|\n|image\t|no\t|Use docker image, covered in Using Docker Images|\n|services\t|no\t|Use docker services, covered in Using Docker Images|\n|stage\t|no\t|Defines a job stage (default: test)|\n|type\t|no\t|Alias for stage|\n|variables\t|no\t|Define job variables on a job level|\n|only\t|no\t|Defines a list of git refs for which job is created|\n|except\t|no\t|Defines a list of git refs for which job is not created|\n|tags\t|no\t|Defines a list of tags which are used to select Runner|\n|allow_failure\t|no\t|Allow job to fail. Failed job doesn't contribute to commit status|\n|when\t|no\t|Define when to run job. Can be on_success, on_failure, always or manual|\n|dependencies\t|no\t|Define other jobs that a job depends on so that you can pass artifacts between them|\n|artifacts\t|no\t|Define list of job artifacts|\n|cache\t|no\t|Define list of files that should be cached between subsequent runs|\n|before_script\t|no\t|Override a set of commands that are executed before job|\n|after_script\t|no\t|Override a set of commands that are executed after job|\n|environment\t|no\t|Defines a name of environment to which deployment is done by this job|\n|coverage\t|no\t|Define code coverage settings for a given job|\n|retry\t|no\t|Define how many times a job can be auto-retried in case of a failure|\n\n更多参考 [官方说明](https://docs.gitlab.com/ee/ci/yaml/README.html)\n\n## 结果查看\n配置结束以后，就可以在GitLab的Pipeline和Jobs两个地方看到执行情况了，在Jobs的位置可以看到每个步骤在服务器上的执行情况。\n![image](/images/gitlab-ci/jobs.png)\n","slug":"使用GitLab-CI进行持续集成","published":1,"updated":"2017-07-29T15:11:36.332Z","_id":"cj5kmnn4r00035kv9ttehmsbu","comments":1,"layout":"post","photos":[],"link":"","content":"<p>从GitLab8.0开始，就内置了GitLab CI，不管围绕着gitlab建立了怎样的workflow，CI都是不可缺少的。<br>如果你的团队使用GitLab，同时又希望研发人员自己承担DevOps的角色，那GitLab CI将是你很好的选择。<br><a id=\"more\"></a></p>\n<p><img src=\"https://docs.gitlab.com/ee/ci/img/cicd_pipeline_infograph.png\" alt=\"image\"></p>\n<h1 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h1><ul>\n<li>GitLab CI的构建流程依托于每台服务器上的GitLab Runner，Runner需要主动注册到Gitlab CI，免去了复杂认证设置，Runner直接在服务器上运行，对本地的操作也会更方便。</li>\n<li>PipeLine依托在项目中配置的.gitlab-ci.yml文件，构建过程管理与研发流程贴得更近。</li>\n</ul>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><h3 id=\"GitLab-Runner\"><a href=\"#GitLab-Runner\" class=\"headerlink\" title=\"GitLab Runner\"></a>GitLab Runner</h3><p>构建过程的执行者，使用Go语言编写，只要能跑Go的地方就能跑。<br>Runner分为Specific Runner与Share Runner。Shared Runner只有系统管理元可以创建，为多个项目服务。Specific Runner有工程访问权限的人都可以创建，大多数情况下，Specific Runner足够使用。</p>\n<h1 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h1><p>这里以我需要配置的一个工程为例。</p>\n<ul>\n<li>服务器操作系统：CentOS 7</li>\n<li>GitLab：8.17.x</li>\n<li>工程语言: Node.js</li>\n</ul>\n<h2 id=\"安装-GitLab-Runner\"><a href=\"#安装-GitLab-Runner\" class=\"headerlink\" title=\"安装 GitLab Runner\"></a>安装 GitLab Runner</h2><p>安装GitLab Runner前，首先要搞清楚自己的GitLab版本，根据<a href=\"https://gitlab.com/gitlab-org/gitlab-ci-multi-runner\" target=\"_blank\" rel=\"external\">官方文档</a>给出的对应表找到自己可用的Runner版本。我这里选择使用v1.11.x</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@host:# yum install gitlab-ci-multi-runner-1.11.2-1</div></pre></td></tr></table></figure>\n<p>GitLab Runner会在服务器上创建gitlab-runner用户，该用户的目录会生成builds文件夹，里面为每个runner建立一个文件夹，文件夹内部放置由该runner管理的信息。</p>\n<p>其他参考 <a href=\"https://docs.gitlab.com/runner/install/\" target=\"_blank\" rel=\"external\">官方说明</a></p>\n<h2 id=\"注册-GitLab-Runner\"><a href=\"#注册-GitLab-Runner\" class=\"headerlink\" title=\"注册 GitLab Runner\"></a>注册 GitLab Runner</h2><p>我这里选择注册一个Specific Runner，需要Url和Token，这两个信息可以从GitLab的项目设置里拿到。位置在设置-&gt;runners</p>\n<p><img src=\"/images/gitlab-ci/runner-url-token.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@host:# gitlab-runner register</div></pre></td></tr></table></figure>\n<p>然后根据提示依次输入URL、Token等信息<br>其中tags信息，Whether to run untagged builds与runner执行的触发有关。<br>executor 可以选定命令执行器，为了方便，我选择了shell</p>\n<p>注册成功以后，可以看到如下字样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Runner registered successfully. Feel free to start it, but if it&apos;s running already the config should be automatically reloaded!</div></pre></td></tr></table></figure></p>\n<p>同时会在 /etc/gitlab-runner/config.toml 生成一份配置文件，可以再次修改部分配置信息，runner会自动重启。<br>在gitlab的runner配置项中，此时也可以看到该runner的，也可以在这里修改runner描述信息和tags等。<br><img src=\"/images/gitlab-ci/runner-added.png\" alt=\"image\"></p>\n<p>一个注册好的runner在其他的代码仓库也是可以看到的，可以选择在多个项目中启用。<br><img src=\"/images/gitlab-ci/runner-exist.png\" alt=\"image\"></p>\n<h2 id=\"配置-gitlab-ci-yml\"><a href=\"#配置-gitlab-ci-yml\" class=\"headerlink\" title=\"配置.gitlab-ci.yml\"></a>配置.gitlab-ci.yml</h2><p>配置好runner以后，在项目中添加.gitlab-ci.yml文件以触发runner的执行。</p>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p><img src=\"https://docs.gitlab.com/ee/ci/img/pipelines_grouped.png\" alt=\"image\"></p>\n<p>GitLab的CI构建过程分为Pipeline、stage、job三个层次。<br>Pipeline是指的一个可执行的构建过程。<br>stage是Pipeline的执行阶段。<br>job是一个具体的执行单元，job里包含的信息最多，需要指明自己所属的stage，需要执行的命令，在什么情况下执行，在哪里执行等。</p>\n<h3 id=\"示例配置文件\"><a href=\"#示例配置文件\" class=\"headerlink\" title=\"示例配置文件\"></a>示例配置文件</h3><p>先给出配置文件:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">stages:</div><div class=\"line\">  - install</div><div class=\"line\">  - test</div><div class=\"line\">  - deploy</div><div class=\"line\"></div><div class=\"line\">cache:</div><div class=\"line\">  key: $&#123;CI_BUILD_REF_NAME&#125;</div><div class=\"line\">  paths:</div><div class=\"line\">    - node_modules/</div><div class=\"line\"></div><div class=\"line\"># 安装依赖</div><div class=\"line\">install:</div><div class=\"line\">  stage: install</div><div class=\"line\">  only:</div><div class=\"line\">    - dev</div><div class=\"line\">  script:</div><div class=\"line\">    - npm install</div><div class=\"line\"></div><div class=\"line\"># 运行测试用例</div><div class=\"line\">test:</div><div class=\"line\">  stage: test</div><div class=\"line\">  only:</div><div class=\"line\">    - dev</div><div class=\"line\">  script:</div><div class=\"line\">    - npm run test</div><div class=\"line\">  allow_failure: true</div><div class=\"line\"></div><div class=\"line\"># 开发环境部署到pm2</div><div class=\"line\">deploy_dev:</div><div class=\"line\">  stage: deploy</div><div class=\"line\">  only:</div><div class=\"line\">    - dev</div><div class=\"line\">  tags:</div><div class=\"line\">    - dev</div><div class=\"line\">  script:</div><div class=\"line\">    - pm2 delete dev || true</div><div class=\"line\">    - pm2 start config/pm2-dev.json --name dev</div><div class=\"line\"></div><div class=\"line\"># 测试环境部署到pm2</div><div class=\"line\">deploy_test:</div><div class=\"line\">  stage: deploy</div><div class=\"line\">  only:</div><div class=\"line\">    - dev</div><div class=\"line\">  tags:</div><div class=\"line\">    - test</div><div class=\"line\">  script:</div><div class=\"line\">    - pm2 delete test || true</div><div class=\"line\">    - pm2 start config/pm2-test.json --name test</div></pre></td></tr></table></figure>\n<p>这份配置文件描述了一个由install、test、deploy三个stage组成的Pipeline，全部由dev分支的更新触发，install和test两个job是公共的，deploy_dev、deploy_test分别在开发和测试两个环境的runner上执行部署。</p>\n<h3 id=\"执行方式和注意事项\"><a href=\"#执行方式和注意事项\" class=\"headerlink\" title=\"执行方式和注意事项\"></a>执行方式和注意事项</h3><p>gitlab会监视仓库内每个分支上的.gitlab-ci.yml文件，在仓库更新的时候触发构建动作。<br>一个仓库内可以有多个.gitlab-ci.yml文件，每个文件都可以成为一个Pipeline,GitLab通过对job的解析，job指定的分支与当前分支对应，并且根据tags等信息匹配到runner时，构成一条可用的Pipeline。<br>可用的Pipeline可以在gitlab上直接查看。<br><img src=\"/images/gitlab-ci/pipeline.png\" alt=\"image\"></p>\n<p>job通过stage标明自己所属的阶段，通过only和except来选定可以触发执行的分支。通过tags来指定执行命令的具体runner，当没有tags的时候，所有允许执行没有标签的作业的runner来执行命令。<br>建议大家在配置的时候，建立好tags的对应关系。</p>\n<h3 id=\"文件格式\"><a href=\"#文件格式\" class=\"headerlink\" title=\"文件格式\"></a>文件格式</h3><p>配置文件中除了保留字及其含义，搬运自官方文档:<br>|Keyword|Required|Description|<br>|:——|:——-|:———|<br>|image |no |Use docker image, covered in Use Docker|<br>|services    |no    |Use docker services, covered in Use Docker|<br>|stages    |no    |Define build stages|<br>|types    |no    |Alias for stages (deprecated)|<br>|before_script    |no    |Define commands that run before each job’s script|<br>|after_script    |no    |Define commands that run after each job’s script|<br>|variables    |no    |Define build variables|<br>|cache    |no    |Define list of files that should be cached between subsequent runs|</p>\n<p>除此之外的key，都被定义为job，在我给出的配置文件中，install、test、deploy_dev、deploy_test均为job。job定义的属性为:<br>|Keyword    |Required    |Description|<br>|:——|:——-|:———|<br>|script    |yes    |Defines a shell script which is executed by Runner|<br>|image    |no    |Use docker image, covered in Using Docker Images|<br>|services    |no    |Use docker services, covered in Using Docker Images|<br>|stage    |no    |Defines a job stage (default: test)|<br>|type    |no    |Alias for stage|<br>|variables    |no    |Define job variables on a job level|<br>|only    |no    |Defines a list of git refs for which job is created|<br>|except    |no    |Defines a list of git refs for which job is not created|<br>|tags    |no    |Defines a list of tags which are used to select Runner|<br>|allow_failure    |no    |Allow job to fail. Failed job doesn’t contribute to commit status|<br>|when    |no    |Define when to run job. Can be on_success, on_failure, always or manual|<br>|dependencies    |no    |Define other jobs that a job depends on so that you can pass artifacts between them|<br>|artifacts    |no    |Define list of job artifacts|<br>|cache    |no    |Define list of files that should be cached between subsequent runs|<br>|before_script    |no    |Override a set of commands that are executed before job|<br>|after_script    |no    |Override a set of commands that are executed after job|<br>|environment    |no    |Defines a name of environment to which deployment is done by this job|<br>|coverage    |no    |Define code coverage settings for a given job|<br>|retry    |no    |Define how many times a job can be auto-retried in case of a failure|</p>\n<p>更多参考 <a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html\" target=\"_blank\" rel=\"external\">官方说明</a></p>\n<h2 id=\"结果查看\"><a href=\"#结果查看\" class=\"headerlink\" title=\"结果查看\"></a>结果查看</h2><p>配置结束以后，就可以在GitLab的Pipeline和Jobs两个地方看到执行情况了，在Jobs的位置可以看到每个步骤在服务器上的执行情况。<br><img src=\"/images/gitlab-ci/jobs.png\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"<p>从GitLab8.0开始，就内置了GitLab CI，不管围绕着gitlab建立了怎样的workflow，CI都是不可缺少的。<br>如果你的团队使用GitLab，同时又希望研发人员自己承担DevOps的角色，那GitLab CI将是你很好的选择。<br>","more":"</p>\n<p><img src=\"https://docs.gitlab.com/ee/ci/img/cicd_pipeline_infograph.png\" alt=\"image\"></p>\n<h1 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h1><ul>\n<li>GitLab CI的构建流程依托于每台服务器上的GitLab Runner，Runner需要主动注册到Gitlab CI，免去了复杂认证设置，Runner直接在服务器上运行，对本地的操作也会更方便。</li>\n<li>PipeLine依托在项目中配置的.gitlab-ci.yml文件，构建过程管理与研发流程贴得更近。</li>\n</ul>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><h3 id=\"GitLab-Runner\"><a href=\"#GitLab-Runner\" class=\"headerlink\" title=\"GitLab Runner\"></a>GitLab Runner</h3><p>构建过程的执行者，使用Go语言编写，只要能跑Go的地方就能跑。<br>Runner分为Specific Runner与Share Runner。Shared Runner只有系统管理元可以创建，为多个项目服务。Specific Runner有工程访问权限的人都可以创建，大多数情况下，Specific Runner足够使用。</p>\n<h1 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h1><p>这里以我需要配置的一个工程为例。</p>\n<ul>\n<li>服务器操作系统：CentOS 7</li>\n<li>GitLab：8.17.x</li>\n<li>工程语言: Node.js</li>\n</ul>\n<h2 id=\"安装-GitLab-Runner\"><a href=\"#安装-GitLab-Runner\" class=\"headerlink\" title=\"安装 GitLab Runner\"></a>安装 GitLab Runner</h2><p>安装GitLab Runner前，首先要搞清楚自己的GitLab版本，根据<a href=\"https://gitlab.com/gitlab-org/gitlab-ci-multi-runner\" target=\"_blank\" rel=\"external\">官方文档</a>给出的对应表找到自己可用的Runner版本。我这里选择使用v1.11.x</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@host:# yum install gitlab-ci-multi-runner-1.11.2-1</div></pre></td></tr></table></figure>\n<p>GitLab Runner会在服务器上创建gitlab-runner用户，该用户的目录会生成builds文件夹，里面为每个runner建立一个文件夹，文件夹内部放置由该runner管理的信息。</p>\n<p>其他参考 <a href=\"https://docs.gitlab.com/runner/install/\" target=\"_blank\" rel=\"external\">官方说明</a></p>\n<h2 id=\"注册-GitLab-Runner\"><a href=\"#注册-GitLab-Runner\" class=\"headerlink\" title=\"注册 GitLab Runner\"></a>注册 GitLab Runner</h2><p>我这里选择注册一个Specific Runner，需要Url和Token，这两个信息可以从GitLab的项目设置里拿到。位置在设置-&gt;runners</p>\n<p><img src=\"/images/gitlab-ci/runner-url-token.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@host:# gitlab-runner register</div></pre></td></tr></table></figure>\n<p>然后根据提示依次输入URL、Token等信息<br>其中tags信息，Whether to run untagged builds与runner执行的触发有关。<br>executor 可以选定命令执行器，为了方便，我选择了shell</p>\n<p>注册成功以后，可以看到如下字样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Runner registered successfully. Feel free to start it, but if it&apos;s running already the config should be automatically reloaded!</div></pre></td></tr></table></figure></p>\n<p>同时会在 /etc/gitlab-runner/config.toml 生成一份配置文件，可以再次修改部分配置信息，runner会自动重启。<br>在gitlab的runner配置项中，此时也可以看到该runner的，也可以在这里修改runner描述信息和tags等。<br><img src=\"/images/gitlab-ci/runner-added.png\" alt=\"image\"></p>\n<p>一个注册好的runner在其他的代码仓库也是可以看到的，可以选择在多个项目中启用。<br><img src=\"/images/gitlab-ci/runner-exist.png\" alt=\"image\"></p>\n<h2 id=\"配置-gitlab-ci-yml\"><a href=\"#配置-gitlab-ci-yml\" class=\"headerlink\" title=\"配置.gitlab-ci.yml\"></a>配置.gitlab-ci.yml</h2><p>配置好runner以后，在项目中添加.gitlab-ci.yml文件以触发runner的执行。</p>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p><img src=\"https://docs.gitlab.com/ee/ci/img/pipelines_grouped.png\" alt=\"image\"></p>\n<p>GitLab的CI构建过程分为Pipeline、stage、job三个层次。<br>Pipeline是指的一个可执行的构建过程。<br>stage是Pipeline的执行阶段。<br>job是一个具体的执行单元，job里包含的信息最多，需要指明自己所属的stage，需要执行的命令，在什么情况下执行，在哪里执行等。</p>\n<h3 id=\"示例配置文件\"><a href=\"#示例配置文件\" class=\"headerlink\" title=\"示例配置文件\"></a>示例配置文件</h3><p>先给出配置文件:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">stages:</div><div class=\"line\">  - install</div><div class=\"line\">  - test</div><div class=\"line\">  - deploy</div><div class=\"line\"></div><div class=\"line\">cache:</div><div class=\"line\">  key: $&#123;CI_BUILD_REF_NAME&#125;</div><div class=\"line\">  paths:</div><div class=\"line\">    - node_modules/</div><div class=\"line\"></div><div class=\"line\"># 安装依赖</div><div class=\"line\">install:</div><div class=\"line\">  stage: install</div><div class=\"line\">  only:</div><div class=\"line\">    - dev</div><div class=\"line\">  script:</div><div class=\"line\">    - npm install</div><div class=\"line\"></div><div class=\"line\"># 运行测试用例</div><div class=\"line\">test:</div><div class=\"line\">  stage: test</div><div class=\"line\">  only:</div><div class=\"line\">    - dev</div><div class=\"line\">  script:</div><div class=\"line\">    - npm run test</div><div class=\"line\">  allow_failure: true</div><div class=\"line\"></div><div class=\"line\"># 开发环境部署到pm2</div><div class=\"line\">deploy_dev:</div><div class=\"line\">  stage: deploy</div><div class=\"line\">  only:</div><div class=\"line\">    - dev</div><div class=\"line\">  tags:</div><div class=\"line\">    - dev</div><div class=\"line\">  script:</div><div class=\"line\">    - pm2 delete dev || true</div><div class=\"line\">    - pm2 start config/pm2-dev.json --name dev</div><div class=\"line\"></div><div class=\"line\"># 测试环境部署到pm2</div><div class=\"line\">deploy_test:</div><div class=\"line\">  stage: deploy</div><div class=\"line\">  only:</div><div class=\"line\">    - dev</div><div class=\"line\">  tags:</div><div class=\"line\">    - test</div><div class=\"line\">  script:</div><div class=\"line\">    - pm2 delete test || true</div><div class=\"line\">    - pm2 start config/pm2-test.json --name test</div></pre></td></tr></table></figure>\n<p>这份配置文件描述了一个由install、test、deploy三个stage组成的Pipeline，全部由dev分支的更新触发，install和test两个job是公共的，deploy_dev、deploy_test分别在开发和测试两个环境的runner上执行部署。</p>\n<h3 id=\"执行方式和注意事项\"><a href=\"#执行方式和注意事项\" class=\"headerlink\" title=\"执行方式和注意事项\"></a>执行方式和注意事项</h3><p>gitlab会监视仓库内每个分支上的.gitlab-ci.yml文件，在仓库更新的时候触发构建动作。<br>一个仓库内可以有多个.gitlab-ci.yml文件，每个文件都可以成为一个Pipeline,GitLab通过对job的解析，job指定的分支与当前分支对应，并且根据tags等信息匹配到runner时，构成一条可用的Pipeline。<br>可用的Pipeline可以在gitlab上直接查看。<br><img src=\"/images/gitlab-ci/pipeline.png\" alt=\"image\"></p>\n<p>job通过stage标明自己所属的阶段，通过only和except来选定可以触发执行的分支。通过tags来指定执行命令的具体runner，当没有tags的时候，所有允许执行没有标签的作业的runner来执行命令。<br>建议大家在配置的时候，建立好tags的对应关系。</p>\n<h3 id=\"文件格式\"><a href=\"#文件格式\" class=\"headerlink\" title=\"文件格式\"></a>文件格式</h3><p>配置文件中除了保留字及其含义，搬运自官方文档:<br>|Keyword|Required|Description|<br>|:——|:——-|:———|<br>|image |no |Use docker image, covered in Use Docker|<br>|services    |no    |Use docker services, covered in Use Docker|<br>|stages    |no    |Define build stages|<br>|types    |no    |Alias for stages (deprecated)|<br>|before_script    |no    |Define commands that run before each job’s script|<br>|after_script    |no    |Define commands that run after each job’s script|<br>|variables    |no    |Define build variables|<br>|cache    |no    |Define list of files that should be cached between subsequent runs|</p>\n<p>除此之外的key，都被定义为job，在我给出的配置文件中，install、test、deploy_dev、deploy_test均为job。job定义的属性为:<br>|Keyword    |Required    |Description|<br>|:——|:——-|:———|<br>|script    |yes    |Defines a shell script which is executed by Runner|<br>|image    |no    |Use docker image, covered in Using Docker Images|<br>|services    |no    |Use docker services, covered in Using Docker Images|<br>|stage    |no    |Defines a job stage (default: test)|<br>|type    |no    |Alias for stage|<br>|variables    |no    |Define job variables on a job level|<br>|only    |no    |Defines a list of git refs for which job is created|<br>|except    |no    |Defines a list of git refs for which job is not created|<br>|tags    |no    |Defines a list of tags which are used to select Runner|<br>|allow_failure    |no    |Allow job to fail. Failed job doesn’t contribute to commit status|<br>|when    |no    |Define when to run job. Can be on_success, on_failure, always or manual|<br>|dependencies    |no    |Define other jobs that a job depends on so that you can pass artifacts between them|<br>|artifacts    |no    |Define list of job artifacts|<br>|cache    |no    |Define list of files that should be cached between subsequent runs|<br>|before_script    |no    |Override a set of commands that are executed before job|<br>|after_script    |no    |Override a set of commands that are executed after job|<br>|environment    |no    |Defines a name of environment to which deployment is done by this job|<br>|coverage    |no    |Define code coverage settings for a given job|<br>|retry    |no    |Define how many times a job can be auto-retried in case of a failure|</p>\n<p>更多参考 <a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html\" target=\"_blank\" rel=\"external\">官方说明</a></p>\n<h2 id=\"结果查看\"><a href=\"#结果查看\" class=\"headerlink\" title=\"结果查看\"></a>结果查看</h2><p>配置结束以后，就可以在GitLab的Pipeline和Jobs两个地方看到执行情况了，在Jobs的位置可以看到每个步骤在服务器上的执行情况。<br><img src=\"/images/gitlab-ci/jobs.png\" alt=\"image\"></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj5kmnn4l00015kv923p0flcz","category_id":"cj5kmnn4u00045kv9s1domxil","_id":"cj5kmnn5800085kv9gu8ty8cz"},{"post_id":"cj5kmnn4r00035kv9ttehmsbu","category_id":"cj5kmnn4u00045kv9s1domxil","_id":"cj5kmnn5c000b5kv95xah9l98"}],"PostTag":[{"post_id":"cj5kmnn4l00015kv923p0flcz","tag_id":"cj5kmnn4x00055kv9e6bhumza","_id":"cj5kmnn5c000a5kv97qean54i"},{"post_id":"cj5kmnn4l00015kv923p0flcz","tag_id":"cj5kmnn5300075kv9yaq80s1y","_id":"cj5kmnn5c000c5kv9zzgru6vn"},{"post_id":"cj5kmnn4r00035kv9ttehmsbu","tag_id":"cj5kmnn4x00055kv9e6bhumza","_id":"cj5kmnn5e000e5kv9sr3psksh"},{"post_id":"cj5kmnn4r00035kv9ttehmsbu","tag_id":"cj5kmnn5300075kv9yaq80s1y","_id":"cj5kmnn5g000f5kv99vsy8d97"}],"Tag":[{"name":"工具","_id":"cj5kmnn4x00055kv9e6bhumza"},{"name":"CI","_id":"cj5kmnn5300075kv9yaq80s1y"}]}}